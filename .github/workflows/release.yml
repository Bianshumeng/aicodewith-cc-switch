name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CARGO_NET_RETRY: "10"
  CARGO_NET_TIMEOUT: "120"
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  RUST_BACKTRACE: "1"

jobs:
  prefetch-cargo:
    name: Prefetch Cargo (offline cache)
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal

      - name: Prefetch crates (locked)
        env:
          CARGO_HOME: ${{ runner.temp }}/cargo-home
        working-directory: src-tauri
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$CARGO_HOME"
          cargo fetch --locked
          cargo fetch --locked --target aarch64-apple-darwin
          cargo fetch --locked --target x86_64-apple-darwin
          cargo fetch --locked --target x86_64-pc-windows-msvc
          tar -C "$CARGO_HOME" -czf cargo-home.tgz .
          mv cargo-home.tgz "$GITHUB_WORKSPACE/"

      - name: Upload cargo-home artifact
        uses: actions/upload-artifact@v4
        with:
          name: cargo-home
          path: cargo-home.tgz
          if-no-files-found: error

  release:
    runs-on: ${{ matrix.os }}
    needs: prefetch-cargo
    env:
      CARGO_HOME: ${{ runner.temp }}/cargo-home
      CARGO_NET_OFFLINE: "true"
    strategy:
      matrix:
        include:
          - os: windows-2022
          - os: ubuntu-22.04
          - os: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Download cargo-home artifact
        uses: actions/download-artifact@v4
        with:
          name: cargo-home
          path: ${{ runner.temp }}

      - name: Restore Cargo HOME (offline)
        shell: bash
        env:
          CARGO_HOME: ${{ runner.temp }}/cargo-home
        run: |
          set -euxo pipefail
          mkdir -p "$CARGO_HOME"
          tar -C "$CARGO_HOME" -xzf "${{ runner.temp }}/cargo-home.tgz"

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri
          shared-key: cc-switch
          cache-on-failure: true

      - name: Add macOS targets (with retry)
        id: macos_targets
        continue-on-error: true
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -e
          for i in {1..5}; do
            echo "Attempt $i/5: Adding macOS targets..."
            if rustup target add aarch64-apple-darwin x86_64-apple-darwin; then
              echo "�?Successfully added macOS targets"
              break
            elif [ $i -eq 5 ]; then
              echo "�?Failed to add macOS targets after 3 attempts"
              exit 1
            else
              echo "鈿狅�?Attempt $i failed, retrying in 10 seconds..."
              sleep 20
            fi
          done

      - name: Add macOS targets via mirror (fallback, opt-in)
        if: runner.os == 'macOS' && steps.macos_targets.outcome == 'failure' && vars.USE_RUSTUP_MIRROR == 'true'
        shell: bash
        env:
          RUSTUP_DIST_SERVER: https://rsproxy.cn
          RUSTUP_UPDATE_ROOT: https://rsproxy.cn/rustup
        run: |
          set -eux
          echo "Fallback to mirror for rustup targets..."
          rustup target add aarch64-apple-darwin x86_64-apple-darwin
      - name: Install Linux system deps
        if: runner.os == 'Linux'
        shell: bash
        timeout-minutes: 10
        run: |
          set -euxo pipefail
          # Retry apt ops with timeouts
          retry_cmd() {
            local cmd="$*"
            for k in {1..5}; do
              echo "Attempt $k/5: $cmd"
              if eval "$cmd"; then return 0; fi
              if [ $k -eq 5 ]; then echo "? Command failed"; return 1; fi
              echo "?? Retry in 10s..."; sleep 10
            done
          }

          retry_cmd "sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 update"
          # Base toolchain and libs
          retry_cmd "sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y --no-install-recommends \
            build-essential \
            pkg-config \
            curl \
            wget \
            file \
            patchelf \
            squashfs-tools \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libfuse2"

          # WebKit2GTK selection (Jammy prefers 4.0)
          if grep -q 'VERSION_ID="22.04"' /etc/os-release; then
            retry_cmd "sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y --no-install-recommends libwebkit2gtk-4.0-dev"
          else
            retry_cmd "sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y --no-install-recommends libwebkit2gtk-4.1-dev" || \
            retry_cmd "sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y --no-install-recommends libwebkit2gtk-4.0-dev"
          fi

