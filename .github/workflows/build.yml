name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  CARGO_NET_RETRY: "10"
  CARGO_NET_TIMEOUT: "120"
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  RUST_BACKTRACE: "1"

jobs:
  prefetch-cargo:
    name: Prefetch Cargo (offline cache)
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          targets: ${{ matrix.platform == 'macos' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Prefetch crates (locked)
        env:
          CARGO_HOME: ${{ runner.temp }}/cargo-home
        working-directory: src-tauri
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "$CARGO_HOME"
          cargo fetch --locked
          cargo fetch --locked --target aarch64-apple-darwin
          cargo fetch --locked --target x86_64-apple-darwin
          cargo fetch --locked --target x86_64-pc-windows-msvc
          tar -C "$CARGO_HOME" -czf cargo-home.tgz .
          mv cargo-home.tgz "$GITHUB_WORKSPACE/"

      - name: Upload cargo-home artifact
        uses: actions/upload-artifact@v4
        with:
          name: cargo-home
          path: cargo-home.tgz
          if-no-files-found: error

  build:
    runs-on: ${{ matrix.os }}
    needs: prefetch-cargo
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: ubuntu-22.04
            platform: linux
          - os: macos-latest
            platform: macos
    env:
      CARGO_HOME: ${{ runner.temp }}/cargo-home
      CARGO_NET_OFFLINE: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal

      - name: Download cargo-home artifact
        uses: actions/download-artifact@v4
        with:
          name: cargo-home
          path: ${{ runner.temp }}

      - name: Restore Cargo HOME (offline)
        shell: bash
        env:
          CARGO_HOME: ${{ runner.temp }}/cargo-home
        run: |
          set -euxo pipefail
          mkdir -p "$CARGO_HOME"
          tar -C "$CARGO_HOME" -xzf "${{ runner.temp }}/cargo-home.tgz"

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: ./src-tauri
          shared-key: cc-switch
          cache-on-failure: true

      - name: Add macOS targets (retry)
        if: matrix.platform == 'macos'
        id: macos_targets
        shell: bash
        continue-on-error: true
        run: |
          set -e
          for i in {1..5}; do
            echo "Attempt $i/5: Adding macOS targets..."
            if rustup target add aarch64-apple-darwin x86_64-apple-darwin; then
              echo "�?Successfully added macOS targets"
              break
            elif [ $i -eq 5 ]; then
              echo "�?Failed to add macOS targets after 5 attempts"
              exit 1
            else
              echo "⚠️ Attempt $i failed, retrying in 20 seconds..."
              sleep 20
            fi
          done

      - name: Add macOS targets via mirror (fallback, opt-in)
        if: matrix.platform == 'macos' && steps.macos_targets.outcome == 'failure' && vars.USE_RUSTUP_MIRROR == 'true'
        shell: bash
        env:
          RUSTUP_DIST_SERVER: https://rsproxy.cn
          RUSTUP_UPDATE_ROOT: https://rsproxy.cn/rustup
        run: |
          set -eux
          echo "Fallback to mirror for rustup targets..."
          rustup target add aarch64-apple-darwin x86_64-apple-darwin


      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 update
          # Base toolchain and libs
          sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y \
            build-essential \
            pkg-config \
            curl \
            wget \
            file \
            patchelf \
            squashfs-tools \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libfuse2
          # WebKit2GTK (prefer 4.0 on Ubuntu 22.04; otherwise try 4.1 then 4.0)
          if grep -q 'VERSION_ID="22.04"' /etc/os-release; then
            sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y libwebkit2gtk-4.0-dev || true
          else
            sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y libwebkit2gtk-4.1-dev \
              || sudo apt-get -o Acquire::Retries=5 -o Acquire::http::Timeout=30 install -y libwebkit2gtk-4.0-dev
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build Tauri App
        run: pnpm tauri build

      - name: Prepare Release Assets
        shell: bash
        run: |
          mkdir -p release-assets

          if [ "${{ matrix.platform }}" == "windows" ]; then
            # Windows MSI installer
            find src-tauri/target/release/bundle/msi -name "*.msi" -exec cp {} release-assets/CC-Switch-Setup.msi \;
            # Windows portable
            if [ -f "src-tauri/target/release/cc-switch.exe" ]; then
              mkdir -p temp-portable
              cp src-tauri/target/release/cc-switch.exe temp-portable/
              cd temp-portable && zip -r ../release-assets/CC-Switch-Windows-Portable.zip . && cd ..
              rm -rf temp-portable
            fi
          elif [ "${{ matrix.platform }}" == "macos" ]; then
            # macOS .app bundle
            find src-tauri/target/release/bundle/macos -name "*.app" | head -1 | xargs -I {} sh -c 'cd "$(dirname "{}")" && zip -r "$GITHUB_WORKSPACE/release-assets/CC-Switch-macOS.zip" "$(basename "{}")"'
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            # Linux .deb package
            find src-tauri/target/release/bundle/deb -name "*.deb" -exec cp {} release-assets/CC-Switch-Linux.deb \;
            # Linux AppImage
            find src-tauri/target/release/bundle/appimage -name "*.AppImage" -exec cp {} release-assets/CC-Switch-Linux.AppImage \;
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cc-switch-${{ matrix.platform }}
          path: release-assets/*

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: CC-Switch for AiCodeWith ${{ github.ref_name }}
          body: |
            ## CC-Switch for AiCodeWith ${{ github.ref_name }}

            专为 [AiCodeWith中转站](https://aicodewith.com/) 定制的Claude Code & Codex 供应商切换工�?
            ### 🚀 特色功能

            - 🚀 预置AiCodeWith供应商配置，开箱即�?            - 🌐 专为国内用户优化的Claude API中转服务
            - �?支持在官方登录和AiCodeWith服务间一键切�?            - 🔒 基于成熟的CC-Switch架构，保障配置安�?
            ### 📥 下载安装

            - **Windows**: `CC-Switch-Setup.msi`（安装版）；`CC-Switch-Windows-Portable.zip`（绿色版�?            - **macOS**: `CC-Switch-macOS.zip`（解压即用）
            - **Linux**: `CC-Switch-Linux.deb`（DEB包）；`CC-Switch-Linux.AppImage`（通用格式�?
            ### 🎯 使用说明

            1. 下载对应系统的安装包
            2. 访问 [AiCodeWith](https://aicodewith.com/) 获取API Token
            3. 在应用中选择预置�?AiCodeWith"供应商并填入Token
            4. 一键切换即可使�?
            ---
            **基于开源项�?*：Fork�?[farion1231/cc-switch](https://github.com/farion1231/cc-switch)，遵循MIT许可�?          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

